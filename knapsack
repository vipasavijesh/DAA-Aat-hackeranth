#!/bin/python3

import math
import os
import random
import re
import sys

def unboundedKnapsack(k, arr):
    # Initialize dp array
    dp = [-1] * (k + 1)
    dp[0] = 0  # base case: zero sum can be achieved by picking no elements
    
    # Iterate over each element in arr
    for element in arr:
        for j in range(element, k + 1):
            if dp[j - element] != -1:
                dp[j] = max(dp[j], dp[j - element] + element)
    
    # Find the maximum sum <= k
    max_sum = 0
    for j in range(k + 1):
        if dp[j] != -1:
            max_sum = max(max_sum, dp[j])
    
    return max_sum


if __name__ == '__main__':
    t = int(input().strip())
    
    for _ in range(t):
        n, k = map(int, input().strip().split())
        arr = list(map(int, input().strip().split()))
        
        result = unboundedKnapsack(k, arr)
        
        print(result)
